/* Generated By:JavaCC: Do not edit this line. Parser.java */
package edu.lmu.cs.xlg.roflkode.syntax;

import java.util.List;
import java.util.ArrayList;
import java.io.Reader;
import edu.lmu.cs.xlg.util.Log;
import edu.lmu.cs.xlg.roflkode.entities.*;

public class Parser implements ParserConstants {

    /**
     * Returns the result of parsing the ROFLKODE program on the given Reader.
     */
    public Script parse(Reader reader, Log log) {
        try {
            return parseScript();
        } catch (TokenMgrError e) {
            log.exception(e);
            return null;
        } catch (ParseException e) {
            log.exception(e);
            return null;
        }
    }

  final public Script parseScript() throws ParseException {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(BR);
    }
    jj_consume_token(4);
    label_2:
    while (true) {
      jj_consume_token(BR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      parseImport();
    }
    label_4:
    while (true) {
      s = parseStmt();
                      statements.add(s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
      case 12:
      case 16:
      case 18:
      case 22:
      case 23:
      case 26:
      case 28:
      case 31:
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 51:
      case 58:
      case 60:
      case 61:
      case 63:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 100:
      case INTLIT:
      case NUMLIT:
      case CHARLIT:
      case STRINGLIT:
      case ID:
      case 116:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(5);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      jj_consume_token(BR);
    }
    jj_consume_token(0);
     {if (true) return new Script(statements);}
    throw new Error("Missing return statement in function");
  }

  final public void parseImport() throws ParseException {
    jj_consume_token(6);
    jj_consume_token(7);
    jj_consume_token(ID);
    jj_consume_token(94);
    label_6:
    while (true) {
      jj_consume_token(BR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
    }
  }

  final public Statement parseStmt() throws ParseException {
    Statement s;
    Declarable d;
    ModifierExpression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
    case 18:
    case 26:
      d = parseDec();
                      s = new DeclarationStatement(d);
      break;
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_1(2147483647)) {
        s = parseComplexStmt();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 12:
        case 16:
        case 22:
        case 23:
        case 28:
        case 31:
        case 32:
        case 33:
        case 35:
        case 36:
        case 37:
        case ID:
          s = parseSimpleStmt();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 38:
          case 39:
          case 40:
          case 41:
            e = parseModifier();
                            s = new ModifiedStatement(s, e);
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    label_7:
    while (true) {
      jj_consume_token(BR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_7;
      }
    }
     {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Declarable parseDec() throws ParseException {
  Declarable d;
    if (jj_2_2(2)) {
      d = parseVardec();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
      case 26:
        d = parseFundec();
        break;
      case 18:
        d = parseTypedec();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public Variable parseVardec() throws ParseException {
  Type t;
  Token name;
  Expression e;
    jj_consume_token(8);
    jj_consume_token(7);
    jj_consume_token(9);
    t = parseType();
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      jj_consume_token(21);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 115:
        jj_consume_token(115);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      e = parseExp();
     {if (true) return new Variable(name.image, t, e);}
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
     {if (true) return new Variable(name.image, t);}
    throw new Error("Missing return statement in function");
  }

  final public Type parseType() throws ParseException {
  Token name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      name = jj_consume_token(25);
      break;
    case 19:
      name = jj_consume_token(19);
      break;
    case 20:
      name = jj_consume_token(20);
      break;
    case 29:
      name = jj_consume_token(29);
      break;
    case 27:
      name = jj_consume_token(27);
      break;
    case ID:
      name = jj_consume_token(ID);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Type(name.image);}
    throw new Error("Missing return statement in function");
  }

  final public Type parseTypedec() throws ParseException {
  Token name;
    jj_consume_token(18);
    jj_consume_token(34);
    jj_consume_token(14);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      jj_consume_token(BR);
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
      case 20:
      case 25:
      case 27:
      case 29:
      case ID:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
      parseType();
      jj_consume_token(ID);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BR:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_10;
        }
        jj_consume_token(BR);
      }
    }
    jj_consume_token(15);
    name = jj_consume_token(ID);
     {if (true) return new Type(name.image);}
    throw new Error("Missing return statement in function");
  }

  final public Block parseBlock() throws ParseException {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
    label_11:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_11;
      }
      s = parseStmt();
                                   statements.add(s);
    }
     {if (true) return new Block(statements);}
    throw new Error("Missing return statement in function");
  }

  final public Function parseFundec() throws ParseException {
  Block b;
  Type t;
  Token name;
  Type returnType = new Type("void");
  List<Variable> p = new ArrayList<Variable>();
  Function f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      jj_consume_token(8);
      jj_consume_token(6);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        jj_consume_token(24);
        returnType = parseType();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      name = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
      case 17:
        p = parseParams();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      label_12:
      while (true) {
        jj_consume_token(BR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BR:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_12;
        }
      }
      b = parseBlock();
      jj_consume_token(30);
     f = new Function(returnType.getName(), name.image, p, b);
      break;
    case 26:
      jj_consume_token(26);
      jj_consume_token(6);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        jj_consume_token(24);
        returnType = parseType();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      name = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
      case 17:
        p = parseParams();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
     f = new Function(returnType.getName(), name.image, p);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public List<Variable> parseParams() throws ParseException {
  List<Variable> parameters = new ArrayList<Variable>();
  Type t;
  Token name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(13);
    t = parseType();
    name = jj_consume_token(ID);
     parameters.add(new Variable(name.image, t));
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_13;
      }
      jj_consume_token(11);
      t = parseType();
      name = jj_consume_token(ID);
     parameters.add(new Variable(name.image, t));
    }
     {if (true) return parameters;}
    throw new Error("Missing return statement in function");
  }

  final public Statement parseSimpleStmt() throws ParseException {
    List<Expression> expressions = new ArrayList<Expression>();
    Expression e;
    VariableExpression v;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      jj_consume_token(12);
      label_14:
      while (true) {
        e = parseExp();
                           expressions.add(e);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 58:
        case 61:
        case 63:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 100:
        case INTLIT:
        case NUMLIT:
        case CHARLIT:
        case STRINGLIT:
        case ID:
        case 116:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_14;
        }
      }
     {if (true) return new YoStatement(expressions);}
      break;
    case 36:
      jj_consume_token(36);
      label_15:
      while (true) {
        e = parseExp();
                                 expressions.add(e);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 58:
        case 61:
        case 63:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 100:
        case INTLIT:
        case NUMLIT:
        case CHARLIT:
        case STRINGLIT:
        case ID:
        case 116:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_15;
        }
      }
     {if (true) return new FacepalmStatement(expressions);}
      break;
    case 33:
      jj_consume_token(33);
      v = parseVar();
     {if (true) return new PwnzorStatement(v);}
      break;
    case 35:
      jj_consume_token(35);
      v = parseVar();
     {if (true) return new UpzorzStatement(v);}
      break;
    case 37:
      jj_consume_token(37);
      v = parseVar();
     {if (true) return new NerfzorzStatement(v);}
      break;
    case 28:
      jj_consume_token(28);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        v = parseVar();
                            {if (true) return new GtfoStatement(v);}
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
     {if (true) return new GtfoStatement();}
      break;
    case 22:
      jj_consume_token(22);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
                    {if (true) return new HwgaStatement(t.image);}
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
     {if (true) return new HwgaStatement();}
      break;
    case 31:
      jj_consume_token(31);
      jj_consume_token(13);
      e = parseExp();
      {if (true) return new HerezStatement (e);}
      break;
    case 23:
      jj_consume_token(23);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
      case 61:
      case 63:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 100:
      case INTLIT:
      case NUMLIT:
      case CHARLIT:
      case STRINGLIT:
      case ID:
      case 116:
        e = parseExp();
                            {if (true) return new DiafStatement(e);}
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
     {if (true) return new DiafStatement();}
      break;
    case 32:
      jj_consume_token(32);
      t = jj_consume_token(ID);
     {if (true) return new GimmehStatement(t.image);}
      break;
    case 16:
      jj_consume_token(16);
      e = parseExp();
     {if (true) return new BrbStatement(e);}
      break;
    default:
      jj_la1[30] = jj_gen;
      if (jj_2_4(2147483647)) {
        v = parseVar();
        jj_consume_token(10);
        e = parseExp();
     {if (true) return new AssignmentStatement(v, e);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          t = jj_consume_token(ID);
          expressions = parseArgs();
     {if (true) return new CallStatement(t.image, expressions);}
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ModifierExpression parseModifier() throws ParseException {
    String s;
    Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      jj_consume_token(38);
              s = "IF";
      break;
    case 39:
      jj_consume_token(39);
      jj_consume_token(38);
                     s = "CEPT IF";
      break;
    case 41:
      jj_consume_token(41);
                 s = "WHIEL";
      break;
    case 40:
      jj_consume_token(40);
               s = "TIL";
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    e = parseExp();
     {if (true) return new ModifierExpression(e, s);}
    throw new Error("Missing return statement in function");
  }

  final public Statement parseComplexStmt() throws ParseException {
    Statement s;
    if (jj_2_5(2147483647)) {
      s = parseConditional();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
      case 61:
      case 63:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 100:
      case INTLIT:
      case NUMLIT:
      case CHARLIT:
      case STRINGLIT:
      case ID:
      case 116:
        s = parseSwitch();
        break;
      case 51:
        s = parseLoop();
        break;
      case 60:
        s = parseTry();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Statement parseConditional() throws ParseException {
  List<ConditionalExpression> m = new ArrayList<ConditionalExpression>(); //statement block
  Expression e;
  Block b;
  ConditionalExpression wb; //werd block
  Block nwb = null;
    e = parseExp();
    jj_consume_token(94);
    label_16:
    while (true) {
      jj_consume_token(BR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_16;
      }
    }
    jj_consume_token(47);
    label_17:
    while (true) {
      jj_consume_token(BR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_17;
      }
    }
    b = parseBlock();
     wb = new ConditionalExpression(e, b);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_18;
      }
      jj_consume_token(48);
      e = parseExp();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BR:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_19;
        }
        jj_consume_token(BR);
      }
      b = parseBlock();
         m.add(new ConditionalExpression(e, b));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      jj_consume_token(46);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BR:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_20;
        }
        jj_consume_token(BR);
      }
      nwb = parseBlock();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(43);
     {if (true) return new ConditionalStatement(wb, m, nwb);}
    throw new Error("Missing return statement in function");
  }

  final public Statement parseSwitch() throws ParseException {
    Expression c;
    List<ConditionalExpression> omg = new ArrayList<ConditionalExpression>();
    Expression e;
    Block b;
    c = parseExp();
    jj_consume_token(44);
    jj_consume_token(94);
    label_21:
    while (true) {
      jj_consume_token(BR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_21;
      }
    }
    label_22:
    while (true) {
      jj_consume_token(45);
      e = parseLiteral();
      label_23:
      while (true) {
        jj_consume_token(BR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BR:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_23;
        }
      }
      b = parseBlock();
         omg.add(new ConditionalExpression(e, b));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_22;
      }
    }
    jj_consume_token(49);
    label_24:
    while (true) {
      jj_consume_token(BR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_24;
      }
    }
    b = parseBlock();
    jj_consume_token(43);
     {if (true) return new SwitchStatement(c, omg, b);}
    throw new Error("Missing return statement in function");
  }

  final public Statement parseLoop() throws ParseException {
    LoopControlExpression l;
    String s;
    Block b;
    String end;
    s = parseLoopStart();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_25;
      }
      jj_consume_token(BR);
    }
    l = parseLoopControl();
    label_26:
    while (true) {
      jj_consume_token(BR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_26;
      }
    }
    b = parseBlock();
    end = parseLoopEnd();
     {if (true) return new LoopStatement(s, l, b, end);}
    throw new Error("Missing return statement in function");
  }

  final public String parseLoopStart() throws ParseException {
    Token t;
    jj_consume_token(51);
    jj_consume_token(52);
    jj_consume_token(13);
    t = jj_consume_token(ID);
     {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public LoopControlExpression parseLoopControl() throws ParseException {
   Expression e;
   Expression f;
   Expression t;
   VariableExpression v;
   LoopControlExpression l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
    case 41:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        jj_consume_token(41);
        break;
      case 40:
        jj_consume_token(40);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e = parseExp();
     l = new WhileLoopControl(e);
      break;
    case 73:
    case 74:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
        jj_consume_token(73);
        break;
      case 74:
        jj_consume_token(74);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      v = parseVar();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        jj_consume_token(64);
        f = parseExp();
        jj_consume_token(53);
        t = parseExp();
         l = new ForLoopControl(v, f, t);
        break;
      case 68:
        jj_consume_token(68);
        e = parseExp();
         l = new ForLoopControl(v, e);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public String parseLoopEnd() throws ParseException {
    Token t;
    jj_consume_token(51);
    jj_consume_token(70);
    jj_consume_token(13);
    t = jj_consume_token(ID);
     {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public Statement parseTry() throws ParseException {
    Statement s;
    Block a;
    Block o;
    jj_consume_token(60);
    s = parseSimpleStmt();
    label_27:
    while (true) {
      jj_consume_token(BR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_27;
      }
    }
    jj_consume_token(72);
    jj_consume_token(59);
    label_28:
    while (true) {
      jj_consume_token(BR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_28;
      }
    }
    a = parseBlock();
    jj_consume_token(50);
    jj_consume_token(66);
    label_29:
    while (true) {
      jj_consume_token(BR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_29;
      }
    }
    o = parseBlock();
    jj_consume_token(69);
     {if (true) return new TryStatement(s, a, o);}
    throw new Error("Missing return statement in function");
  }

  final public Expression parseExp() throws ParseException {
    Expression e1;
    Expression e2;
    e1 = parseExp1();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 92:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_30;
      }
      jj_consume_token(92);
      e2 = parseExp1();
                                e1 = new BinaryExpression(e1, "ORELSE", e2);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression parseExp1() throws ParseException {
    Expression e1;
    Expression e2;
    e1 = parseExp2();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_31;
      }
      jj_consume_token(93);
      e2 = parseExp2();
                                e1 = new BinaryExpression(e1, "ANALSO", e2);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression parseExp2() throws ParseException {
    Expression e1;
    Expression e2;
    e1 = parseExp3();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_32;
      }
      jj_consume_token(89);
      e2 = parseExp3();
                               e1 = new BinaryExpression(e1, "BITOR", e2);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression parseExp3() throws ParseException {
    Expression e1;
    Expression e2;
    e1 = parseExp4();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_33;
      }
      jj_consume_token(91);
      e2 = parseExp4();
                                e1 = new BinaryExpression(e1, "BITXOR", e2);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression parseExp4() throws ParseException {
    Expression e1;
    Expression e2;
    e1 = parseExp5();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 90:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_34;
      }
      jj_consume_token(90);
      e2 = parseExp5();
                                e1 = new BinaryExpression(e1, "BITAND", e2);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression parseExp5() throws ParseException {
    String op;
    Expression e1;
    Expression e2;
    e1 = parseExp6();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 65:
    case 67:
    case 71:
    case 75:
      op = parseRelop();
      e2 = parseExp6();
         e1 = new BinaryExpression(e1, op, e2);
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression parseExp6() throws ParseException {
    String op;
    Expression e1;
    Expression e2;
    e1 = parseExp7();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 76:
      case 77:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_35;
      }
      op = parseShiftop();
      e2 = parseExp7();
         e1 = new BinaryExpression(e1, op, e2);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression parseExp7() throws ParseException {
    String op;
    Expression e1;
    Expression e2;
    e1 = parseExp8();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
      case 62:
      case 97:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_36;
      }
      op = parseAddop();
      e2 = parseExp8();
         e1 = new BinaryExpression(e1, op, e2);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression parseExp8() throws ParseException {
    String op;
    Expression e1;
    Expression e2;
    e1 = parseExp9();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 78:
      case 79:
      case 80:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_37;
      }
      op = parseMulop();
      e2 = parseExp9();
         e1 = new BinaryExpression(e1, op, e2);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression parseExp9() throws ParseException {
    String op = null;
    Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
      op = parsePrefixop();
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    e = parseExp10();
     {if (true) return op == null ? e : new UnaryExpression(op, e);}
    throw new Error("Missing return statement in function");
  }

  final public Expression parseExp10() throws ParseException {
    Expression e;
    List<Expression> list = new ArrayList<Expression>();
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
    case 61:
    case 63:
    case INTLIT:
    case NUMLIT:
    case CHARLIT:
    case STRINGLIT:
      e = parseLiteral();
                        {if (true) return e;}
      break;
    default:
      jj_la1[65] = jj_gen;
      if (jj_2_6(2)) {
        t = jj_consume_token(ID);
        jj_consume_token(98);
        label_38:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 58:
          case 61:
          case 63:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 100:
          case INTLIT:
          case NUMLIT:
          case CHARLIT:
          case STRINGLIT:
          case ID:
          case 116:
            ;
            break;
          default:
            jj_la1[63] = jj_gen;
            break label_38;
          }
          e = parseExp();
                                                 list.add(e);
        }
        jj_consume_token(99);
     {if (true) return new BukkitExpression(t.image, list);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          e = parseVar();
                    {if (true) return e;}
          break;
        case 100:
          jj_consume_token(100);
          label_39:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 58:
            case 61:
            case 63:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 100:
            case INTLIT:
            case NUMLIT:
            case CHARLIT:
            case STRINGLIT:
            case ID:
            case 116:
              ;
              break;
            default:
              jj_la1[64] = jj_gen;
              break label_39;
            }
            e = parseExp();
                           list.add(e);
          }
          jj_consume_token(101);
     {if (true) return new ArrayExpression(list);}
          break;
        case 116:
          jj_consume_token(116);
          e = parseExp();
          jj_consume_token(117);
                            {if (true) return e;}
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Literal parseLiteral() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 61:
      jj_consume_token(61);
            {if (true) return NoobLiteral.INSTANCE;}
      break;
    case 58:
      jj_consume_token(58);
           {if (true) return BooleanLiteral.WIN;}
      break;
    case 63:
      jj_consume_token(63);
            {if (true) return BooleanLiteral.FAIL;}
      break;
    case INTLIT:
      t = jj_consume_token(INTLIT);
                  {if (true) return new IntegerLiteral(t.image);}
      break;
    case NUMLIT:
      t = jj_consume_token(NUMLIT);
                  {if (true) return new NumberLiteral(t.image);}
      break;
    case CHARLIT:
      t = jj_consume_token(CHARLIT);
                   {if (true) return new KarLiteral(t.image);}
      break;
    case STRINGLIT:
      t = jj_consume_token(STRINGLIT);
                     {if (true) return new StringLiteral(t.image);}
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VariableExpression parseVar() throws ParseException {
    VariableExpression v;
    List<Expression> arguments = new ArrayList<Expression>();
    Expression e;
    Token t;
    Token p;
    t = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 102:
      arguments = parseArgs();
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
        if (arguments.isEmpty()) {
            v = new SimpleVariableExpression(t.image);
        } else {
            v = new CallExpression(t.image, arguments);
        }
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
      case 96:
        ;
        break;
      default:
        jj_la1[69] = jj_gen;
        break label_40;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        e = parseExp();
        jj_consume_token(95);
         v = new ArraySlotVariableExpression(v, e);
        break;
      case 96:
        jj_consume_token(96);
        p = jj_consume_token(ID);
         v = new BukkitSlotVariableExpression(v, p.image);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public List<Expression> parseArgs() throws ParseException {
    List<Expression> arguments = new ArrayList<Expression>();
    Expression e;
    jj_consume_token(102);
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
      case 61:
      case 63:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 100:
      case INTLIT:
      case NUMLIT:
      case CHARLIT:
      case STRINGLIT:
      case ID:
      case 116:
        ;
        break;
      default:
        jj_la1[71] = jj_gen;
        break label_41;
      }
      e = parseExp();
                           arguments.add(e);
    }
    jj_consume_token(103);
     {if (true) return arguments;}
    throw new Error("Missing return statement in function");
  }

  final public String parseRelop() throws ParseException {
    if (jj_2_7(2)) {
      jj_consume_token(67);
      jj_consume_token(55);
      jj_consume_token(65);
      jj_consume_token(56);
                                          {if (true) return ">=";}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
        jj_consume_token(67);
            {if (true) return ">";}
        break;
      default:
        jj_la1[72] = jj_gen;
        if (jj_2_8(3)) {
          jj_consume_token(71);
          jj_consume_token(57);
          jj_consume_token(55);
          jj_consume_token(65);
          jj_consume_token(56);
                                                {if (true) return "<=";}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 71:
            jj_consume_token(71);
            jj_consume_token(57);
                  {if (true) return "<";}
            break;
          case 65:
            jj_consume_token(65);
            jj_consume_token(56);
                 {if (true) return "==";}
            break;
          case 75:
            jj_consume_token(75);
              {if (true) return "\u005c\u005c";}
            break;
          default:
            jj_la1[73] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String parseShiftop() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 76:
      t = jj_consume_token(76);
      break;
    case 77:
      t = jj_consume_token(77);
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String parseAddop() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      t = jj_consume_token(54);
              {if (true) return "+";}
      break;
    case 62:
      t = jj_consume_token(62);
                {if (true) return "-";}
      break;
    case 97:
      t = jj_consume_token(97);
              {if (true) return "~~";}
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String parseMulop() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 78:
      t = jj_consume_token(78);
      break;
    case 79:
      t = jj_consume_token(79);
      break;
    case 80:
      t = jj_consume_token(80);
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String parsePrefixop() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 81:
      t = jj_consume_token(81);
      break;
    case 82:
      t = jj_consume_token(82);
      break;
    case 83:
      t = jj_consume_token(83);
      jj_consume_token(14);
      break;
    case 84:
      t = jj_consume_token(84);
      break;
    case 85:
      t = jj_consume_token(85);
      break;
    case 86:
      t = jj_consume_token(86);
      break;
    case 87:
      t = jj_consume_token(87);
      break;
    case 88:
      t = jj_consume_token(88);
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_3R_136() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(STRINGLIT)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(CHARLIT)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(NUMLIT)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(51)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(INTLIT)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(8)) return true;
    if (jj_scan_token(7)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(117)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(100)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(101)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(98)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_136()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(99)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    if (jj_scan_token(104)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(104)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_125()) return true;
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_120()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_122()) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_113()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_115()) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_112()) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(90)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(16)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_106()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(83)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(32)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(23)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(91)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(31)) return true;
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_101()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(22)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(28)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(37)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(97)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(35)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(33)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(36)) return true;
    Token xsp;
    if (jj_3R_93()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(12)) return true;
    Token xsp;
    if (jj_3R_92()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(65)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(71)) return true;
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(71)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(67)) return true;
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(26)) return true;
    if (jj_scan_token(6)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(102)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(103)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(8)) return true;
    if (jj_scan_token(6)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(96)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[78];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x40,0x94c51100,0x0,0x0,0x0,0x4040100,0x90c11000,0x0,0x4040100,0x0,0x200000,0x2a180000,0x0,0x2a180000,0x0,0x1000000,0x22000,0x0,0x1000000,0x22000,0x4000100,0x20000,0x800,0x0,0x0,0x0,0x0,0x0,0x90c11000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0xb408003b,0x0,0x0,0x3c0,0x0,0x3b,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa4000000,0xa4000000,0x0,0x0,0xa4000000,0x3b,0x0,0x3c0,0xb4080000,0x0,0x0,0x10000,0x0,0x0,0x400,0x0,0x0,0x2000,0x0,0x0,0x0,0x300,0x0,0x0,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40400000,0x0,0x0,0xa4000000,0xa4000000,0xa4000000,0x0,0xa4000000,0x0,0x0,0x0,0xa4000000,0x0,0x0,0x0,0x40400000,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x1fe0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1fe0000,0x1fe0000,0x0,0x0,0x1fe0000,0x0,0x0,0x0,0x1fe0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600,0x11,0x600,0x0,0x0,0x0,0x10000000,0x20000000,0x2000000,0x8000000,0x4000000,0x88a,0x3000,0x0,0x1c000,0x1fe0000,0x1fe0000,0x1fe0000,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x1fe0000,0x8,0x882,0x3000,0x0,0x1c000,0x1fe0000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x100,0x100,0x0,0x113610,0x100,0x100,0x0,0x0,0x10000,0x100,0x0,0x80000,0x0,0x10000,0x100,0x10000,0x100,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x113610,0x113610,0x10000,0x10000,0x113610,0x0,0x10000,0x0,0x113610,0x100,0x100,0x0,0x100,0x100,0x0,0x100,0x100,0x0,0x100,0x100,0x100,0x0,0x0,0x0,0x0,0x100,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x113610,0x113610,0x3600,0x110010,0x3600,0x40,0x1,0x1,0x113610,0x0,0x0,0x0,0x2,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 78; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 78; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 78; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 78; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 78; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 78; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[118];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 78; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 118; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
