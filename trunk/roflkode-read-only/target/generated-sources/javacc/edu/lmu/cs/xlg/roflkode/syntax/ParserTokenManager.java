/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package edu.lmu.cs.xlg.roflkode.syntax;
import java.util.List;
import java.util.ArrayList;
import java.io.Reader;
import edu.lmu.cs.xlg.util.Log;
import edu.lmu.cs.xlg.roflkode.entities.*;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 105;
            return 42;
         }
         if ((active0 & 0xfc61d7bbfdce70f0L) != 0L || (active1 & 0x1cb4ebfL) != 0L)
         {
            jjmatchedKind = 112;
            return 32;
         }
         if ((active0 & 0x200000402010000L) != 0L || (active1 & 0xe143000L) != 0L)
         {
            jjmatchedKind = 112;
            return 2;
         }
         if ((active0 & 0x19e284000308f00L) != 0L || (active1 & 0x30208140L) != 0L)
            return 32;
         return -1;
      case 1:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 105;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xfc03fbb7ffef80f0L) != 0L || (active1 & 0xfdffdfbL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active0 & 0x3f8044800107800L) != 0L || (active1 & 0x30200204L) != 0L)
            return 32;
         return -1;
      case 2:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 105;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xe00182bfffc00020L) != 0L || (active1 & 0x3f5d7fffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 2;
            }
            return 32;
         }
         if ((active0 & 0x1c027900003f80d0L) != 0L || (active1 & 0xa28000L) != 0L)
            return 32;
         return -1;
      case 3:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 105;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x3021fe0000020L) != 0L || (active1 & 0x3ee57bc0L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 3;
            }
            return 32;
         }
         if ((active0 & 0xe00080a01fc00000L) != 0L || (active1 & 0x118043fL) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 105;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x2003f00000020L) != 0L || (active1 & 0x3df53c00L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 4;
            return 32;
         }
         if ((active0 & 0x10200e0000000L) != 0L || (active1 & 0x20043c0L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active0 & 0x3000000020L) != 0L || (active1 & 0x1153000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 5;
            return 32;
         }
         if ((active0 & 0x2000f00000000L) != 0L || (active1 & 0x3ce00c00L) != 0L)
            return 32;
         return -1;
      case 6:
         if ((active0 & 0x3000000000L) != 0L || (active1 & 0x43000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 6;
            return 32;
         }
         if ((active0 & 0x20L) != 0L || (active1 & 0x1110000L) != 0L)
            return 32;
         return -1;
      case 7:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 7;
            return 32;
         }
         if ((active0 & 0x3000000000L) != 0L || (active1 & 0x41000L) != 0L)
            return 32;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000000L);
      case 40:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L);
      case 41:
         return jjStopAtPos(0, 117);
      case 52:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa800000000L);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 63:
         return jjStopAtPos(0, 94);
      case 65:
         jjmatchedKind = 9;
         return jjMoveStringLiteralDfa1_0(0x100000000008800L, 0x20000100L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x200000402010000L, 0xe143000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x8000000040L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x800L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x8000001000000000L, 0x1L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x110000000L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x80400090L, 0x0L);
      case 73:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x18004000300000L, 0x200000L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x80020L, 0x800000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x1000001000000L, 0x20L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x6000042020000000L, 0x420404L);
      case 79:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x82280000000000L, 0x10008040L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x1000000200000000L, 0x88L);
      case 82:
         return jjStartNfaWithStates_0(0, 10, 32);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x80002L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x820010004040000L, 0x4010L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x40000800006000L, 0x200L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x400d20000020000L, 0x0L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x8001000L, 0x1000000L);
      case 91:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 126:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L);
      case 41:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      case 48:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000002000000L, active1, 0x100000L);
      case 58:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         break;
      case 62:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x80004010090800d0L, active1, 0x1820002L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x400180a080040000L, active1, 0x8000000010400L);
      case 70:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 32);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x800020004000000L, active1, 0x10L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x400090100820000L, active1, 0xe0c7800L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0x20L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 77:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 51, 32);
         return jjMoveStringLiteralDfa2_0(active0, 0x2200000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0x20200000L);
      case 79:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 32);
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 32);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      case 80:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0x200L);
      case 82:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 32);
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40010000L, active1, 0x10000001L);
      case 83:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 56, 32);
         break;
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x100010200020L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x420000000L, active1, 0x400040L);
      case 86:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 32);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L);
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0x200400000L, active1, 0x188L);
      case 89:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 32);
         break;
      case 93:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         break;
      case 126:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 96);
         break;
      case 48:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000002000000L, active1, 0x100000L);
      case 65:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 32);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0x20000020L);
      case 66:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L);
      case 67:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000000L, active1, 0x10084006L);
      case 70:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 32);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0x10000L);
      case 71:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000400000L, active1, 0L);
      case 72:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x20L, active1, 0L);
      case 73:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 4, 32);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000020000000000L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L);
      case 76:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 32);
         break;
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x120000000L, active1, 0x400000L);
      case 78:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 32);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x88L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x200L);
      case 82:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000802088000000L, active1, 0x1800410L);
      case 83:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x100L);
      case 84:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xe243040L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000800L);
      case 88:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 32);
         break;
      case 90:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 32);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L);
      case 66:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000020000000L, active1, 0L);
      case 68:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 32);
         break;
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x21080000000L, active1, 0x8000000000080L);
      case 70:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 32);
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x400L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xa00L);
      case 75:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 76:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0x30100000L);
      case 77:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 32);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 32);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0x4000L);
      case 78:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000L);
      case 79:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x2000000L);
      case 83:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 32);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 32);
         break;
      case 84:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10040L);
      case 85:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L, active1, 0x8000000L);
      case 89:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 32);
         break;
      case 90:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0xe43000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 32);
         break;
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L, active1, 0L);
      case 68:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 69:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x400L);
      case 76:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L);
      case 77:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 32);
         break;
      case 78:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x8e10000L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 32);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 32);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(4, 115);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0x2000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x30000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 32);
         break;
      case 90:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 32);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x1100000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 68:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 32);
         break;
      case 69:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L);
      case 70:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 32);
         break;
      case 72:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 32);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 78:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 32);
         break;
      case 79:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x1100000L);
      case 82:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 32);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 32);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 32);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 32);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 32);
         break;
      case 84:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 32);
         break;
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L);
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L, active1, 0L);
      case 90:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 32);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 32);
         break;
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 82:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 32);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 84, 32);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000L);
      case 77:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 32);
         break;
      case 80:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 82, 32);
         break;
      case 84:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 76, 32);
         break;
      case 90:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 84:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 77, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x20L, 0x0L
};
static final long[] jjbitVec4 = {
   0x30000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x1600000000000000L
};
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0x420040000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec8 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec10 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec11 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x7f7ffdff80f8007fL, 0xffffffffffffffdbL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fff000000ffffffL
};
static final long[] jjbitVec14 = {
   0x0L, 0xffff000000000000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec15 = {
   0x87ffffff80000000L, 0xfffffffe7fffffffL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 42;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x100000002400L & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(34, 35);
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 39)
                     jjAddStates(6, 7);
                  break;
               case 2:
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(32);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  else if (curChar == 46)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                     jjCheckNAdd(34);
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x100000002400L & l) != 0L && kind > 104)
                     kind = 104;
                  break;
               case 5:
                  if (curChar == 39)
                     jjAddStates(6, 7);
                  break;
               case 6:
                  if ((0xfbffff7f00000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if (curChar == 39 && kind > 108)
                     kind = 108;
                  break;
               case 8:
                  if (curChar == 58)
                     jjAddStates(8, 9);
                  break;
               case 9:
                  if ((0x4400028400000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 10:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if (curChar == 41)
                     jjCheckNAdd(7);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 12);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  break;
               case 19:
                  if ((0xfbffff7f00000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 20:
                  if (curChar == 58)
                     jjAddStates(22, 23);
                  break;
               case 21:
                  if ((0x4400028400000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 22:
                  if (curChar == 34 && kind > 109)
                     kind = 109;
                  break;
               case 23:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 25:
                  if (curChar == 41)
                     jjCheckNAddStates(3, 5);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 28);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 25);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 35);
                  break;
               case 33:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 36:
                  if (curChar != 46)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 87)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(1);
                  break;
               case 6:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(10, 14);
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(14, 12);
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 19:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjAddStates(3, 5);
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(24, 28);
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(27, 25);
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(32, 35);
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(32);
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 104)
                        kind = 104;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 112)
                        kind = 112;
                     jjCheckNAdd(32);
                  }
                  break;
               case 2:
               case 32:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(32);
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 104)
                     kind = 104;
                  break;
               case 6:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 19:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               case 31:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(32);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   34, 35, 36, 19, 20, 22, 6, 8, 9, 10, 14, 12, 15, 16, 17, 14, 
   12, 15, 14, 12, 15, 16, 21, 23, 27, 25, 28, 29, 30, 27, 25, 28, 
   27, 25, 28, 29, 39, 40, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec15[i2] & l2) != 0L);
      default :
         if ((jjbitVec6[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\110\101\111", "\113\124\110\130\102\131\105", 
"\103\101\116", "\110\101\123", "\111", "\101", "\122", "\101\116", "\131\117", "\125\122", 
"\125\126", "\101\113\101", "\102\122\102", "\127\111\106", "\124\105\110", 
"\113\101\122", "\111\116\124", "\111\124\132", "\110\127\107\101", "\104\111\101\106", 
"\115\101\105\113", "\102\60\60\114", "\124\110\105\115", "\131\101\122\116", "\107\124\106\117", 
"\116\125\115\102\122", "\123\122\123\114\131", "\110\105\122\105\132", "\107\111\115\115\105\110", 
"\120\127\116\132\117\122", "\102\125\113\113\111\124", "\125\120\132\117\122\132", 
"\106\101\103\105\120\101\114\115", "\116\105\122\106\132\117\122\132", "\111\106", "\103\105\120\124", 
"\124\111\114", "\127\110\111\105\114", "\116\117", "\117\111\103", "\127\124\106", 
"\117\115\107", "\127\101\111", "\127\105\122\104", "\115\105\102\102\105", 
"\117\115\107\127\124\106", "\117", "\111\115", "\111\116", "\124\117", "\125\120", "\117\122", 
"\101\123", "\102\131", "\127\111\116", "\124\110\130", "\120\114\132", "\116\60\60\102", 
"\116\105\122\106", "\106\101\111\114", "\106\122\117\115", "\123\101\105\115", 
"\116\117\105\123", "\120\127\116\123", "\124\110\122\125", "\115\113\101\131", 
"\117\125\124\124\101", "\120\127\116\105\104", "\101\127\123\125\115", "\125\120\120\111\116", 
"\116\105\122\106\111\116", "\104\111\126\111\104\132", "\102\111\124\132\114\105\106\124", 
"\102\111\124\132\122\111\107\110\124", "\124\111\105\115\132", "\117\126\122", "\114\105\106\124\117\126\122", 
"\116\101\101", "\102\111\124\132\106\114\111\120", "\123\111\105\132", 
"\102\60\60\114\132\117\122", "\111\116\124\132\117\122", "\116\125\115\132\117\122", 
"\113\101\122\132\117\122", "\131\101\122\116\132\117\122", "\102\111\124\117\122", 
"\102\111\124\101\116\104", "\102\111\124\130\117\122", "\117\122\105\114\123\105", 
"\101\116\101\114\123\117", "\77", "\41\41", "\41\41\41", "\176\176", "\74\72", "\72\76", "\133\72", 
"\72\135", "\50\72", "\72\51", null, null, null, null, null, null, null, null, null, null, 
null, "\64\105\126\105\122", "\50", "\51", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffff1L, 0x3937ffffffffffL, 
};
static final long[] jjtoSkip = {
   0xeL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[42];
private final int[] jjstateSet = new int[84];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 42; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
